<script lang="ts">
	import CircleAlert from 'lucide-svelte/icons/circle-alert';

	import { onMount } from 'svelte';

	import { title as titleStore } from '$lib/stores';
	import type { Views } from '$lib/supabase';
	import { convertServerId } from '$lib/utils';

	import DataTable, { type Column, type SortKey } from '$lib/components/data-table2.svelte';
	import * as Alert from '$lib/components/ui/alert';
	import * as Card from '$lib/components/ui/card';

	titleStore.set('Guilds');

	type Guild = Views<'guild_rankings'>;

	const defaultGuilds: Guild[] = Array(6)
		.fill(null)
		.map(() => ({
			globalPowerRank: 0,
			serverId: 0,
			name: '',
			notice: '',
			level: 0,
			experience: BigInt(0),
			power: BigInt(0),
			totalMembers: 0,
			contributions: BigInt(0),
			globalContributionRank: 0
		})) as unknown as Guild[];

	const defaultSortyKeys: SortKey[] = [{ id: 'globalPowerRank', order: 'asc' }];

	const columns: Column<Guild>[] = [
		{
			accessor: 'globalPowerRank',
			header: 'Global Rank',
			cell: ({ value }) => value.toLocaleString('en-US')
		},
		{
			id: 'serverId',
			header: 'Server',
			accessor: ({ region, serverId }) => `${region}-${convertServerId(region, serverId)}`
		},
		{
			accessor: 'name',
			header: 'Name'
		},
		{
			accessor: 'notice',
			header: 'Description',
			cell: ({ value }) => value || 'No description'
		},
		{
			accessor: 'level',
			header: 'Level'
		},
		{
			accessor: 'experience',
			header: 'Experience',
			cell: ({ value }) => value.toLocaleString('en-US')
		},
		{
			accessor: 'power',
			header: 'Power',
			cell: ({ value }) => value.toLocaleString('en-US')
		},
		{
			accessor: 'totalMembers',
			header: 'Members'
		},
		{
			id: 'contributions',
			header: 'Contributions',
			accessor: ({ contributions, globalContributionRank }) =>
				`${contributions.toLocaleString('en-US')}  (#${globalContributionRank})`
		}
	];

	async function fetchGuilds(
		page: number,
		sortBy: string,
		sortDir: 'desc' | 'asc',
		query?: string
	): Promise<{ total: number; data: any[] }> {
		const params = new URLSearchParams({
			page: page.toString(),
			sortBy,
			sortDir
		});

		if (query) {
			params.append('query', query);
		}

		const resp = await fetch(`/api/guilds?${params.toString()}`);
		const { total, guilds: data }: { total: number; guilds: Guild[] } = await resp.json();

		return { total, data };
	}

	let stats: {
		total?: number;
		totalRegions?: { count: number; region: string }[];
		topPower?: Guild;
		topLevel?: Guild;
		topContributions?: Guild;
	} = {};

	onMount(async () => {
		const resp = await fetch('/api/guilds/stats');
		const json = await resp.json();
		stats = json.stats;
	});
</script>

<div>
	<h1 class="text-3xl font-bold leading-tight tracking-tight text-gray-900">üè∞ Guilds</h1>
	<p class="text-muted-foreground mt-1 max-w-4xl text-base">
		A list of all guilds and their members. This data is updated every day at reset.
	</p>

	<Alert.Root class="my-8 border-blue-200 bg-blue-100">
		<CircleAlert class="h-4 w-4 !text-blue-800" />
		<Alert.Title class="font-semibold tracking-normal text-blue-700">
			Limited Data Available
		</Alert.Title>
		<Alert.Description class="text-blue-700">
			This data currently only includes North America and Europe. SEA will be added in the future.
		</Alert.Description>
	</Alert.Root>
</div>

<div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
	<Card.Root class="border-gray-300">
		<Card.Header class="flex flex-row items-center justify-between space-y-0 p-4 pb-2">
			<Card.Title class="text-primary text-base font-medium">Total Guilds</Card.Title>
		</Card.Header>
		<Card.Content class="p-4 pt-0">
			{#if stats.total && stats.totalRegions}
				<div class="text-2xl font-bold">
					{stats.total.toLocaleString('en-US')} Guilds
				</div>
				<p class="text-muted-foreground mt-1 text-sm font-medium">
					{#each stats.totalRegions as item, index}
						{#if index > 0}
							&nbsp;&#x2022;
						{/if}
						{item.region}: {item.count.toLocaleString('en-US')}
					{/each}
				</p>
			{:else}
				<div class="animate-pulse">
					<div class="mt-2 h-2.5 w-32 rounded bg-slate-200" />
					<div class="mt-4 h-2 w-12 rounded bg-slate-200" />
				</div>
			{/if}
		</Card.Content>
	</Card.Root>
	<Card.Root class="border-gray-300">
		<Card.Header class="flex flex-row items-center justify-between space-y-0 p-4 pb-2">
			<Card.Title class="text-base font-medium text-purple-500">Most Active</Card.Title>
		</Card.Header>
		<Card.Content class="p-4 pt-0">
			{#if stats.topContributions}
				<div class="text-2xl font-bold">
					{stats.topContributions.region}-{convertServerId(
						stats.topContributions.region,
						stats.topContributions.serverId
					)}
					{stats.topContributions.name}
				</div>
				<p class="text-muted-foreground mt-1 text-sm font-medium">
					Contributions: {stats.topContributions.contributions.toLocaleString('en-US')}
				</p>
			{:else}
				<div class="animate-pulse">
					<div class="mt-2 h-2.5 w-32 rounded bg-slate-200" />
					<div class="mt-4 h-2 w-12 rounded bg-slate-200" />
				</div>
			{/if}
		</Card.Content>
	</Card.Root>
	<Card.Root class="border-gray-300">
		<Card.Header class="flex flex-row items-center justify-between space-y-0 p-4 pb-2">
			<Card.Title class="text-base font-medium text-red-500">Most Powerful</Card.Title>
		</Card.Header>
		<Card.Content class="p-4 pt-0">
			{#if stats.topPower}
				<div class="text-2xl font-bold">
					{stats.topPower.region}-{convertServerId(stats.topPower.region, stats.topPower.serverId)}
					{stats.topPower.name}
				</div>
				<p class="text-muted-foreground mt-1 text-sm font-medium">
					Power: {stats.topPower.power.toLocaleString('en-US')}
				</p>
			{:else}
				<div class="animate-pulse">
					<div class="mt-2 h-2.5 w-32 rounded bg-slate-200" />
					<div class="mt-4 h-2 w-12 rounded bg-slate-200" />
				</div>
			{/if}
		</Card.Content>
	</Card.Root>
	<Card.Root class="border-gray-300">
		<Card.Header class="flex flex-row items-center justify-between space-y-0 p-4 pb-2">
			<Card.Title class="text-base font-medium text-green-600">Highest Level</Card.Title>
		</Card.Header>
		<Card.Content class="p-4 pt-0">
			{#if stats.topLevel}
				<div class="text-2xl font-bold">
					{stats.topLevel.region}-{convertServerId(stats.topLevel.region, stats.topLevel.serverId)}
					{stats.topLevel.name}
				</div>
				<p class="text-muted-foreground mt-1 text-sm font-medium">
					Level: {stats.topLevel.level.toLocaleString('en-US')}
				</p>
			{:else}
				<div class="animate-pulse">
					<div class="mt-2 h-2.5 w-32 rounded bg-slate-200" />
					<div class="mt-4 h-2 w-12 rounded bg-slate-200" />
				</div>
			{/if}
		</Card.Content>
	</Card.Root>
</div>

<DataTable
	fetchFunction={fetchGuilds}
	{columns}
	enableSearch={true}
	boldedColumns={['name']}
	perPage={20}
	searchPlaceholder="Search for a guild name or description"
	{defaultSortyKeys}
/>
